// Code generated by "enumer -type=SizeUnit -json --transform=snake -trimprefix SizeUnit --output=./resource_enum_size_unit.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SizeUnitName = "cmcinchbytesectorskbytembytegbytemm"

var _SizeUnitIndex = [...]uint8{0, 2, 7, 11, 18, 23, 28, 33, 35}

const _SizeUnitLowerName = "cmcinchbytesectorskbytembytegbytemm"

func (i SizeUnit) String() string {
	if i >= SizeUnit(len(_SizeUnitIndex)-1) {
		return fmt.Sprintf("SizeUnit(%d)", i)
	}
	return _SizeUnitName[_SizeUnitIndex[i]:_SizeUnitIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SizeUnitNoOp() {
	var x [1]struct{}
	_ = x[SizeUnitCm-(0)]
	_ = x[SizeUnitCinch-(1)]
	_ = x[SizeUnitByte-(2)]
	_ = x[SizeUnitSectors-(3)]
	_ = x[SizeUnitKbyte-(4)]
	_ = x[SizeUnitMbyte-(5)]
	_ = x[SizeUnitGbyte-(6)]
	_ = x[SizeUnitMm-(7)]
}

var _SizeUnitValues = []SizeUnit{SizeUnitCm, SizeUnitCinch, SizeUnitByte, SizeUnitSectors, SizeUnitKbyte, SizeUnitMbyte, SizeUnitGbyte, SizeUnitMm}

var _SizeUnitNameToValueMap = map[string]SizeUnit{
	_SizeUnitName[0:2]:        SizeUnitCm,
	_SizeUnitLowerName[0:2]:   SizeUnitCm,
	_SizeUnitName[2:7]:        SizeUnitCinch,
	_SizeUnitLowerName[2:7]:   SizeUnitCinch,
	_SizeUnitName[7:11]:       SizeUnitByte,
	_SizeUnitLowerName[7:11]:  SizeUnitByte,
	_SizeUnitName[11:18]:      SizeUnitSectors,
	_SizeUnitLowerName[11:18]: SizeUnitSectors,
	_SizeUnitName[18:23]:      SizeUnitKbyte,
	_SizeUnitLowerName[18:23]: SizeUnitKbyte,
	_SizeUnitName[23:28]:      SizeUnitMbyte,
	_SizeUnitLowerName[23:28]: SizeUnitMbyte,
	_SizeUnitName[28:33]:      SizeUnitGbyte,
	_SizeUnitLowerName[28:33]: SizeUnitGbyte,
	_SizeUnitName[33:35]:      SizeUnitMm,
	_SizeUnitLowerName[33:35]: SizeUnitMm,
}

var _SizeUnitNames = []string{
	_SizeUnitName[0:2],
	_SizeUnitName[2:7],
	_SizeUnitName[7:11],
	_SizeUnitName[11:18],
	_SizeUnitName[18:23],
	_SizeUnitName[23:28],
	_SizeUnitName[28:33],
	_SizeUnitName[33:35],
}

// SizeUnitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SizeUnitString(s string) (SizeUnit, error) {
	if val, ok := _SizeUnitNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SizeUnitNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SizeUnit values", s)
}

// SizeUnitValues returns all values of the enum
func SizeUnitValues() []SizeUnit {
	return _SizeUnitValues
}

// SizeUnitStrings returns a slice of all String values of the enum
func SizeUnitStrings() []string {
	strs := make([]string, len(_SizeUnitNames))
	copy(strs, _SizeUnitNames)
	return strs
}

// IsASizeUnit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SizeUnit) IsASizeUnit() bool {
	for _, v := range _SizeUnitValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SizeUnit
func (i SizeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SizeUnit
func (i *SizeUnit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SizeUnit should be a string, got %s", data)
	}

	var err error
	*i, err = SizeUnitString(s)
	return err
}
