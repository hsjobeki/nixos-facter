// Code generated by "enumer -type=ResourceType -json -transform=snake -trimprefix ResourceType -output=./resource_enum_type.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ResourceTypeName = "anyphys_memmemioirqdmamonitorsizedisk_geocachebaudinit_stringspppd_optionframebufferhwaddrlinkwlanfcphwaddr"

var _ResourceTypeIndex = [...]uint8{0, 3, 11, 14, 16, 19, 22, 29, 33, 41, 46, 50, 62, 73, 84, 90, 94, 98, 100, 107}

const _ResourceTypeLowerName = "anyphys_memmemioirqdmamonitorsizedisk_geocachebaudinit_stringspppd_optionframebufferhwaddrlinkwlanfcphwaddr"

func (i ResourceType) String() string {
	if i >= ResourceType(len(_ResourceTypeIndex)-1) {
		return fmt.Sprintf("ResourceType(%d)", i)
	}
	return _ResourceTypeName[_ResourceTypeIndex[i]:_ResourceTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ResourceTypeNoOp() {
	var x [1]struct{}
	_ = x[ResourceTypeAny-(0)]
	_ = x[ResourceTypePhysMem-(1)]
	_ = x[ResourceTypeMem-(2)]
	_ = x[ResourceTypeIo-(3)]
	_ = x[ResourceTypeIrq-(4)]
	_ = x[ResourceTypeDma-(5)]
	_ = x[ResourceTypeMonitor-(6)]
	_ = x[ResourceTypeSize-(7)]
	_ = x[ResourceTypeDiskGeo-(8)]
	_ = x[ResourceTypeCache-(9)]
	_ = x[ResourceTypeBaud-(10)]
	_ = x[ResourceTypeInitStrings-(11)]
	_ = x[ResourceTypePppdOption-(12)]
	_ = x[ResourceTypeFramebuffer-(13)]
	_ = x[ResourceTypeHwaddr-(14)]
	_ = x[ResourceTypeLink-(15)]
	_ = x[ResourceTypeWlan-(16)]
	_ = x[ResourceTypeFc-(17)]
	_ = x[ResourceTypePhwaddr-(18)]
}

var _ResourceTypeValues = []ResourceType{ResourceTypeAny, ResourceTypePhysMem, ResourceTypeMem, ResourceTypeIo, ResourceTypeIrq, ResourceTypeDma, ResourceTypeMonitor, ResourceTypeSize, ResourceTypeDiskGeo, ResourceTypeCache, ResourceTypeBaud, ResourceTypeInitStrings, ResourceTypePppdOption, ResourceTypeFramebuffer, ResourceTypeHwaddr, ResourceTypeLink, ResourceTypeWlan, ResourceTypeFc, ResourceTypePhwaddr}

var _ResourceTypeNameToValueMap = map[string]ResourceType{
	_ResourceTypeName[0:3]:          ResourceTypeAny,
	_ResourceTypeLowerName[0:3]:     ResourceTypeAny,
	_ResourceTypeName[3:11]:         ResourceTypePhysMem,
	_ResourceTypeLowerName[3:11]:    ResourceTypePhysMem,
	_ResourceTypeName[11:14]:        ResourceTypeMem,
	_ResourceTypeLowerName[11:14]:   ResourceTypeMem,
	_ResourceTypeName[14:16]:        ResourceTypeIo,
	_ResourceTypeLowerName[14:16]:   ResourceTypeIo,
	_ResourceTypeName[16:19]:        ResourceTypeIrq,
	_ResourceTypeLowerName[16:19]:   ResourceTypeIrq,
	_ResourceTypeName[19:22]:        ResourceTypeDma,
	_ResourceTypeLowerName[19:22]:   ResourceTypeDma,
	_ResourceTypeName[22:29]:        ResourceTypeMonitor,
	_ResourceTypeLowerName[22:29]:   ResourceTypeMonitor,
	_ResourceTypeName[29:33]:        ResourceTypeSize,
	_ResourceTypeLowerName[29:33]:   ResourceTypeSize,
	_ResourceTypeName[33:41]:        ResourceTypeDiskGeo,
	_ResourceTypeLowerName[33:41]:   ResourceTypeDiskGeo,
	_ResourceTypeName[41:46]:        ResourceTypeCache,
	_ResourceTypeLowerName[41:46]:   ResourceTypeCache,
	_ResourceTypeName[46:50]:        ResourceTypeBaud,
	_ResourceTypeLowerName[46:50]:   ResourceTypeBaud,
	_ResourceTypeName[50:62]:        ResourceTypeInitStrings,
	_ResourceTypeLowerName[50:62]:   ResourceTypeInitStrings,
	_ResourceTypeName[62:73]:        ResourceTypePppdOption,
	_ResourceTypeLowerName[62:73]:   ResourceTypePppdOption,
	_ResourceTypeName[73:84]:        ResourceTypeFramebuffer,
	_ResourceTypeLowerName[73:84]:   ResourceTypeFramebuffer,
	_ResourceTypeName[84:90]:        ResourceTypeHwaddr,
	_ResourceTypeLowerName[84:90]:   ResourceTypeHwaddr,
	_ResourceTypeName[90:94]:        ResourceTypeLink,
	_ResourceTypeLowerName[90:94]:   ResourceTypeLink,
	_ResourceTypeName[94:98]:        ResourceTypeWlan,
	_ResourceTypeLowerName[94:98]:   ResourceTypeWlan,
	_ResourceTypeName[98:100]:       ResourceTypeFc,
	_ResourceTypeLowerName[98:100]:  ResourceTypeFc,
	_ResourceTypeName[100:107]:      ResourceTypePhwaddr,
	_ResourceTypeLowerName[100:107]: ResourceTypePhwaddr,
}

var _ResourceTypeNames = []string{
	_ResourceTypeName[0:3],
	_ResourceTypeName[3:11],
	_ResourceTypeName[11:14],
	_ResourceTypeName[14:16],
	_ResourceTypeName[16:19],
	_ResourceTypeName[19:22],
	_ResourceTypeName[22:29],
	_ResourceTypeName[29:33],
	_ResourceTypeName[33:41],
	_ResourceTypeName[41:46],
	_ResourceTypeName[46:50],
	_ResourceTypeName[50:62],
	_ResourceTypeName[62:73],
	_ResourceTypeName[73:84],
	_ResourceTypeName[84:90],
	_ResourceTypeName[90:94],
	_ResourceTypeName[94:98],
	_ResourceTypeName[98:100],
	_ResourceTypeName[100:107],
}

// ResourceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResourceTypeString(s string) (ResourceType, error) {
	if val, ok := _ResourceTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ResourceTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResourceType values", s)
}

// ResourceTypeValues returns all values of the enum
func ResourceTypeValues() []ResourceType {
	return _ResourceTypeValues
}

// ResourceTypeStrings returns a slice of all String values of the enum
func ResourceTypeStrings() []string {
	strs := make([]string, len(_ResourceTypeNames))
	copy(strs, _ResourceTypeNames)
	return strs
}

// IsAResourceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResourceType) IsAResourceType() bool {
	for _, v := range _ResourceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ResourceType
func (i ResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResourceType
func (i *ResourceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ResourceType should be a string, got %s", data)
	}

	var err error
	*i, err = ResourceTypeString(s)
	return err
}
