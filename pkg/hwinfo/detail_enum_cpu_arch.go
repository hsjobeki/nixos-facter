// Code generated by "enumer -type=CpuArch -json -transform=snake -trimprefix CpuArch -output=./detail_enum_cpu_arch.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CpuArchName = "unknownintelalphasparcsparc64ppcppc64cpi_arch68kia64s390s390xarmmipsx86_64aarch64loongarchriscv"

var _CpuArchIndex = [...]uint8{0, 7, 12, 17, 22, 29, 32, 37, 48, 52, 56, 61, 64, 68, 74, 81, 90, 95}

const _CpuArchLowerName = "unknownintelalphasparcsparc64ppcppc64cpi_arch68kia64s390s390xarmmipsx86_64aarch64loongarchriscv"

func (i CpuArch) String() string {
	if i >= CpuArch(len(_CpuArchIndex)-1) {
		return fmt.Sprintf("CpuArch(%d)", i)
	}
	return _CpuArchName[_CpuArchIndex[i]:_CpuArchIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CpuArchNoOp() {
	var x [1]struct{}
	_ = x[CpuArchUnknown-(0)]
	_ = x[CpuArchIntel-(1)]
	_ = x[CpuArchAlpha-(2)]
	_ = x[CpuArchSparc-(3)]
	_ = x[CpuArchSparc64-(4)]
	_ = x[CpuArchPpc-(5)]
	_ = x[CpuArchPpc64-(6)]
	_ = x[CpiArch68k-(7)]
	_ = x[CpuArchIa64-(8)]
	_ = x[CpuArchS390-(9)]
	_ = x[CpuArchS390x-(10)]
	_ = x[CpuArchArm-(11)]
	_ = x[CpuArchMips-(12)]
	_ = x[CpuArchx86_64-(13)]
	_ = x[CpuArchAarch64-(14)]
	_ = x[CpuArchLoongarch-(15)]
	_ = x[CpuArchRiscv-(16)]
}

var _CpuArchValues = []CpuArch{CpuArchUnknown, CpuArchIntel, CpuArchAlpha, CpuArchSparc, CpuArchSparc64, CpuArchPpc, CpuArchPpc64, CpiArch68k, CpuArchIa64, CpuArchS390, CpuArchS390x, CpuArchArm, CpuArchMips, CpuArchx86_64, CpuArchAarch64, CpuArchLoongarch, CpuArchRiscv}

var _CpuArchNameToValueMap = map[string]CpuArch{
	_CpuArchName[0:7]:        CpuArchUnknown,
	_CpuArchLowerName[0:7]:   CpuArchUnknown,
	_CpuArchName[7:12]:       CpuArchIntel,
	_CpuArchLowerName[7:12]:  CpuArchIntel,
	_CpuArchName[12:17]:      CpuArchAlpha,
	_CpuArchLowerName[12:17]: CpuArchAlpha,
	_CpuArchName[17:22]:      CpuArchSparc,
	_CpuArchLowerName[17:22]: CpuArchSparc,
	_CpuArchName[22:29]:      CpuArchSparc64,
	_CpuArchLowerName[22:29]: CpuArchSparc64,
	_CpuArchName[29:32]:      CpuArchPpc,
	_CpuArchLowerName[29:32]: CpuArchPpc,
	_CpuArchName[32:37]:      CpuArchPpc64,
	_CpuArchLowerName[32:37]: CpuArchPpc64,
	_CpuArchName[37:48]:      CpiArch68k,
	_CpuArchLowerName[37:48]: CpiArch68k,
	_CpuArchName[48:52]:      CpuArchIa64,
	_CpuArchLowerName[48:52]: CpuArchIa64,
	_CpuArchName[52:56]:      CpuArchS390,
	_CpuArchLowerName[52:56]: CpuArchS390,
	_CpuArchName[56:61]:      CpuArchS390x,
	_CpuArchLowerName[56:61]: CpuArchS390x,
	_CpuArchName[61:64]:      CpuArchArm,
	_CpuArchLowerName[61:64]: CpuArchArm,
	_CpuArchName[64:68]:      CpuArchMips,
	_CpuArchLowerName[64:68]: CpuArchMips,
	_CpuArchName[68:74]:      CpuArchx86_64,
	_CpuArchLowerName[68:74]: CpuArchx86_64,
	_CpuArchName[74:81]:      CpuArchAarch64,
	_CpuArchLowerName[74:81]: CpuArchAarch64,
	_CpuArchName[81:90]:      CpuArchLoongarch,
	_CpuArchLowerName[81:90]: CpuArchLoongarch,
	_CpuArchName[90:95]:      CpuArchRiscv,
	_CpuArchLowerName[90:95]: CpuArchRiscv,
}

var _CpuArchNames = []string{
	_CpuArchName[0:7],
	_CpuArchName[7:12],
	_CpuArchName[12:17],
	_CpuArchName[17:22],
	_CpuArchName[22:29],
	_CpuArchName[29:32],
	_CpuArchName[32:37],
	_CpuArchName[37:48],
	_CpuArchName[48:52],
	_CpuArchName[52:56],
	_CpuArchName[56:61],
	_CpuArchName[61:64],
	_CpuArchName[64:68],
	_CpuArchName[68:74],
	_CpuArchName[74:81],
	_CpuArchName[81:90],
	_CpuArchName[90:95],
}

// CpuArchString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CpuArchString(s string) (CpuArch, error) {
	if val, ok := _CpuArchNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CpuArchNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CpuArch values", s)
}

// CpuArchValues returns all values of the enum
func CpuArchValues() []CpuArch {
	return _CpuArchValues
}

// CpuArchStrings returns a slice of all String values of the enum
func CpuArchStrings() []string {
	strs := make([]string, len(_CpuArchNames))
	copy(strs, _CpuArchNames)
	return strs
}

// IsACpuArch returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CpuArch) IsACpuArch() bool {
	for _, v := range _CpuArchValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CpuArch
func (i CpuArch) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CpuArch
func (i *CpuArch) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CpuArch should be a string, got %s", data)
	}

	var err error
	*i, err = CpuArchString(s)
	return err
}
