// Code generated by "enumer -type=PciFlag -json -transform=snake -trimprefix PciFlag -output=./detail_enum_pci_flag.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PciFlagName = "okpmagp"

var _PciFlagIndex = [...]uint8{0, 2, 4, 7}

const _PciFlagLowerName = "okpmagp"

func (i PciFlag) String() string {
	if i >= PciFlag(len(_PciFlagIndex)-1) {
		return fmt.Sprintf("PciFlag(%d)", i)
	}
	return _PciFlagName[_PciFlagIndex[i]:_PciFlagIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PciFlagNoOp() {
	var x [1]struct{}
	_ = x[PciFlagOk-(0)]
	_ = x[PciFlagPm-(1)]
	_ = x[PciFlagAgp-(2)]
}

var _PciFlagValues = []PciFlag{PciFlagOk, PciFlagPm, PciFlagAgp}

var _PciFlagNameToValueMap = map[string]PciFlag{
	_PciFlagName[0:2]:      PciFlagOk,
	_PciFlagLowerName[0:2]: PciFlagOk,
	_PciFlagName[2:4]:      PciFlagPm,
	_PciFlagLowerName[2:4]: PciFlagPm,
	_PciFlagName[4:7]:      PciFlagAgp,
	_PciFlagLowerName[4:7]: PciFlagAgp,
}

var _PciFlagNames = []string{
	_PciFlagName[0:2],
	_PciFlagName[2:4],
	_PciFlagName[4:7],
}

// PciFlagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PciFlagString(s string) (PciFlag, error) {
	if val, ok := _PciFlagNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PciFlagNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PciFlag values", s)
}

// PciFlagValues returns all values of the enum
func PciFlagValues() []PciFlag {
	return _PciFlagValues
}

// PciFlagStrings returns a slice of all String values of the enum
func PciFlagStrings() []string {
	strs := make([]string, len(_PciFlagNames))
	copy(strs, _PciFlagNames)
	return strs
}

// IsAPciFlag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PciFlag) IsAPciFlag() bool {
	for _, v := range _PciFlagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PciFlag
func (i PciFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PciFlag
func (i *PciFlag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PciFlag should be a string, got %s", data)
	}

	var err error
	*i, err = PciFlagString(s)
	return err
}
