// Code generated by "enumer -type=HardwareClass -json -transform=snake -trimprefix HardwareClass -output=./report_enum_hardware_class.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _HardwareClassName = "nonesystemcpukeyboardbraillemousejoystickprinterscannerchip_cardmonitortv_cardgraphics_cardframebuffercamerasoundstorage_controllernetwork_controllerisdn_adaptermodemnetwork_interfacediskpartitioncdromfloppymanualusb_controllerusbbiospciisapnpbridgehubscsiidememorydvb_cardpcmciapcmcia_controllerfirewirefirewire_controllerhotplughotplug_controllerzippppoewlan_cardredasddsl_adapterblock_devicetapevesa_biosbluetoothfingerprintmmc_controllernvmeunknownall"

var _HardwareClassIndex = [...]uint16{0, 4, 10, 13, 21, 28, 33, 41, 48, 55, 64, 71, 78, 91, 102, 108, 113, 131, 149, 161, 166, 183, 187, 196, 201, 207, 213, 227, 230, 234, 237, 243, 249, 252, 256, 259, 265, 273, 279, 296, 304, 323, 330, 348, 351, 356, 365, 371, 382, 394, 398, 407, 416, 427, 441, 445, 452, 455}

const _HardwareClassLowerName = "nonesystemcpukeyboardbraillemousejoystickprinterscannerchip_cardmonitortv_cardgraphics_cardframebuffercamerasoundstorage_controllernetwork_controllerisdn_adaptermodemnetwork_interfacediskpartitioncdromfloppymanualusb_controllerusbbiospciisapnpbridgehubscsiidememorydvb_cardpcmciapcmcia_controllerfirewirefirewire_controllerhotplughotplug_controllerzippppoewlan_cardredasddsl_adapterblock_devicetapevesa_biosbluetoothfingerprintmmc_controllernvmeunknownall"

func (i HardwareClass) String() string {
	if i >= HardwareClass(len(_HardwareClassIndex)-1) {
		return fmt.Sprintf("HardwareClass(%d)", i)
	}
	return _HardwareClassName[_HardwareClassIndex[i]:_HardwareClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HardwareClassNoOp() {
	var x [1]struct{}
	_ = x[HardwareClassNone-(0)]
	_ = x[HardwareClassSystem-(1)]
	_ = x[HardwareClassCpu-(2)]
	_ = x[HardwareClassKeyboard-(3)]
	_ = x[HardwareClassBraille-(4)]
	_ = x[HardwareClassMouse-(5)]
	_ = x[HardwareClassJoystick-(6)]
	_ = x[HardwareClassPrinter-(7)]
	_ = x[HardwareClassScanner-(8)]
	_ = x[HardwareClassChipCard-(9)]
	_ = x[HardwareClassMonitor-(10)]
	_ = x[HardwareClassTvCard-(11)]
	_ = x[HardwareClassGraphicsCard-(12)]
	_ = x[HardwareClassFramebuffer-(13)]
	_ = x[HardwareClassCamera-(14)]
	_ = x[HardwareClassSound-(15)]
	_ = x[HardwareClassStorageController-(16)]
	_ = x[HardwareClassNetworkController-(17)]
	_ = x[HardwareClassIsdnAdapter-(18)]
	_ = x[HardwareClassModem-(19)]
	_ = x[HardwareClassNetworkInterface-(20)]
	_ = x[HardwareClassDisk-(21)]
	_ = x[HardwareClassPartition-(22)]
	_ = x[HardwareClassCdrom-(23)]
	_ = x[HardwareClassFloppy-(24)]
	_ = x[HardwareClassManual-(25)]
	_ = x[HardwareClassUsbController-(26)]
	_ = x[HardwareClassUsb-(27)]
	_ = x[HardwareClassBios-(28)]
	_ = x[HardwareClassPci-(29)]
	_ = x[HardwareClassIsapnp-(30)]
	_ = x[HardwareClassBridge-(31)]
	_ = x[HardwareClassHub-(32)]
	_ = x[HardwareClassScsi-(33)]
	_ = x[HardwareClassIde-(34)]
	_ = x[HardwareClassMemory-(35)]
	_ = x[HardwareClassDvbCard-(36)]
	_ = x[HardwareClassPcmcia-(37)]
	_ = x[HardwareClassPcmciaController-(38)]
	_ = x[HardwareClassFirewire-(39)]
	_ = x[HardwareClassFirewireController-(40)]
	_ = x[HardwareClassHotplug-(41)]
	_ = x[HardwareClassHotplugController-(42)]
	_ = x[HardwareClassZip-(43)]
	_ = x[HardwareClassPppoe-(44)]
	_ = x[HardwareClassWlanCard-(45)]
	_ = x[HardwareClassRedasd-(46)]
	_ = x[HardwareClassDslAdapter-(47)]
	_ = x[HardwareClassBlockDevice-(48)]
	_ = x[HardwareClassTape-(49)]
	_ = x[HardwareClassVesaBios-(50)]
	_ = x[HardwareClassBluetooth-(51)]
	_ = x[HardwareClassFingerprint-(52)]
	_ = x[HardwareClassMmcController-(53)]
	_ = x[HardwareClassNvme-(54)]
	_ = x[HardwareClassUnknown-(55)]
	_ = x[HardwareClassAll-(56)]
}

var _HardwareClassValues = []HardwareClass{HardwareClassNone, HardwareClassSystem, HardwareClassCpu, HardwareClassKeyboard, HardwareClassBraille, HardwareClassMouse, HardwareClassJoystick, HardwareClassPrinter, HardwareClassScanner, HardwareClassChipCard, HardwareClassMonitor, HardwareClassTvCard, HardwareClassGraphicsCard, HardwareClassFramebuffer, HardwareClassCamera, HardwareClassSound, HardwareClassStorageController, HardwareClassNetworkController, HardwareClassIsdnAdapter, HardwareClassModem, HardwareClassNetworkInterface, HardwareClassDisk, HardwareClassPartition, HardwareClassCdrom, HardwareClassFloppy, HardwareClassManual, HardwareClassUsbController, HardwareClassUsb, HardwareClassBios, HardwareClassPci, HardwareClassIsapnp, HardwareClassBridge, HardwareClassHub, HardwareClassScsi, HardwareClassIde, HardwareClassMemory, HardwareClassDvbCard, HardwareClassPcmcia, HardwareClassPcmciaController, HardwareClassFirewire, HardwareClassFirewireController, HardwareClassHotplug, HardwareClassHotplugController, HardwareClassZip, HardwareClassPppoe, HardwareClassWlanCard, HardwareClassRedasd, HardwareClassDslAdapter, HardwareClassBlockDevice, HardwareClassTape, HardwareClassVesaBios, HardwareClassBluetooth, HardwareClassFingerprint, HardwareClassMmcController, HardwareClassNvme, HardwareClassUnknown, HardwareClassAll}

var _HardwareClassNameToValueMap = map[string]HardwareClass{
	_HardwareClassName[0:4]:          HardwareClassNone,
	_HardwareClassLowerName[0:4]:     HardwareClassNone,
	_HardwareClassName[4:10]:         HardwareClassSystem,
	_HardwareClassLowerName[4:10]:    HardwareClassSystem,
	_HardwareClassName[10:13]:        HardwareClassCpu,
	_HardwareClassLowerName[10:13]:   HardwareClassCpu,
	_HardwareClassName[13:21]:        HardwareClassKeyboard,
	_HardwareClassLowerName[13:21]:   HardwareClassKeyboard,
	_HardwareClassName[21:28]:        HardwareClassBraille,
	_HardwareClassLowerName[21:28]:   HardwareClassBraille,
	_HardwareClassName[28:33]:        HardwareClassMouse,
	_HardwareClassLowerName[28:33]:   HardwareClassMouse,
	_HardwareClassName[33:41]:        HardwareClassJoystick,
	_HardwareClassLowerName[33:41]:   HardwareClassJoystick,
	_HardwareClassName[41:48]:        HardwareClassPrinter,
	_HardwareClassLowerName[41:48]:   HardwareClassPrinter,
	_HardwareClassName[48:55]:        HardwareClassScanner,
	_HardwareClassLowerName[48:55]:   HardwareClassScanner,
	_HardwareClassName[55:64]:        HardwareClassChipCard,
	_HardwareClassLowerName[55:64]:   HardwareClassChipCard,
	_HardwareClassName[64:71]:        HardwareClassMonitor,
	_HardwareClassLowerName[64:71]:   HardwareClassMonitor,
	_HardwareClassName[71:78]:        HardwareClassTvCard,
	_HardwareClassLowerName[71:78]:   HardwareClassTvCard,
	_HardwareClassName[78:91]:        HardwareClassGraphicsCard,
	_HardwareClassLowerName[78:91]:   HardwareClassGraphicsCard,
	_HardwareClassName[91:102]:       HardwareClassFramebuffer,
	_HardwareClassLowerName[91:102]:  HardwareClassFramebuffer,
	_HardwareClassName[102:108]:      HardwareClassCamera,
	_HardwareClassLowerName[102:108]: HardwareClassCamera,
	_HardwareClassName[108:113]:      HardwareClassSound,
	_HardwareClassLowerName[108:113]: HardwareClassSound,
	_HardwareClassName[113:131]:      HardwareClassStorageController,
	_HardwareClassLowerName[113:131]: HardwareClassStorageController,
	_HardwareClassName[131:149]:      HardwareClassNetworkController,
	_HardwareClassLowerName[131:149]: HardwareClassNetworkController,
	_HardwareClassName[149:161]:      HardwareClassIsdnAdapter,
	_HardwareClassLowerName[149:161]: HardwareClassIsdnAdapter,
	_HardwareClassName[161:166]:      HardwareClassModem,
	_HardwareClassLowerName[161:166]: HardwareClassModem,
	_HardwareClassName[166:183]:      HardwareClassNetworkInterface,
	_HardwareClassLowerName[166:183]: HardwareClassNetworkInterface,
	_HardwareClassName[183:187]:      HardwareClassDisk,
	_HardwareClassLowerName[183:187]: HardwareClassDisk,
	_HardwareClassName[187:196]:      HardwareClassPartition,
	_HardwareClassLowerName[187:196]: HardwareClassPartition,
	_HardwareClassName[196:201]:      HardwareClassCdrom,
	_HardwareClassLowerName[196:201]: HardwareClassCdrom,
	_HardwareClassName[201:207]:      HardwareClassFloppy,
	_HardwareClassLowerName[201:207]: HardwareClassFloppy,
	_HardwareClassName[207:213]:      HardwareClassManual,
	_HardwareClassLowerName[207:213]: HardwareClassManual,
	_HardwareClassName[213:227]:      HardwareClassUsbController,
	_HardwareClassLowerName[213:227]: HardwareClassUsbController,
	_HardwareClassName[227:230]:      HardwareClassUsb,
	_HardwareClassLowerName[227:230]: HardwareClassUsb,
	_HardwareClassName[230:234]:      HardwareClassBios,
	_HardwareClassLowerName[230:234]: HardwareClassBios,
	_HardwareClassName[234:237]:      HardwareClassPci,
	_HardwareClassLowerName[234:237]: HardwareClassPci,
	_HardwareClassName[237:243]:      HardwareClassIsapnp,
	_HardwareClassLowerName[237:243]: HardwareClassIsapnp,
	_HardwareClassName[243:249]:      HardwareClassBridge,
	_HardwareClassLowerName[243:249]: HardwareClassBridge,
	_HardwareClassName[249:252]:      HardwareClassHub,
	_HardwareClassLowerName[249:252]: HardwareClassHub,
	_HardwareClassName[252:256]:      HardwareClassScsi,
	_HardwareClassLowerName[252:256]: HardwareClassScsi,
	_HardwareClassName[256:259]:      HardwareClassIde,
	_HardwareClassLowerName[256:259]: HardwareClassIde,
	_HardwareClassName[259:265]:      HardwareClassMemory,
	_HardwareClassLowerName[259:265]: HardwareClassMemory,
	_HardwareClassName[265:273]:      HardwareClassDvbCard,
	_HardwareClassLowerName[265:273]: HardwareClassDvbCard,
	_HardwareClassName[273:279]:      HardwareClassPcmcia,
	_HardwareClassLowerName[273:279]: HardwareClassPcmcia,
	_HardwareClassName[279:296]:      HardwareClassPcmciaController,
	_HardwareClassLowerName[279:296]: HardwareClassPcmciaController,
	_HardwareClassName[296:304]:      HardwareClassFirewire,
	_HardwareClassLowerName[296:304]: HardwareClassFirewire,
	_HardwareClassName[304:323]:      HardwareClassFirewireController,
	_HardwareClassLowerName[304:323]: HardwareClassFirewireController,
	_HardwareClassName[323:330]:      HardwareClassHotplug,
	_HardwareClassLowerName[323:330]: HardwareClassHotplug,
	_HardwareClassName[330:348]:      HardwareClassHotplugController,
	_HardwareClassLowerName[330:348]: HardwareClassHotplugController,
	_HardwareClassName[348:351]:      HardwareClassZip,
	_HardwareClassLowerName[348:351]: HardwareClassZip,
	_HardwareClassName[351:356]:      HardwareClassPppoe,
	_HardwareClassLowerName[351:356]: HardwareClassPppoe,
	_HardwareClassName[356:365]:      HardwareClassWlanCard,
	_HardwareClassLowerName[356:365]: HardwareClassWlanCard,
	_HardwareClassName[365:371]:      HardwareClassRedasd,
	_HardwareClassLowerName[365:371]: HardwareClassRedasd,
	_HardwareClassName[371:382]:      HardwareClassDslAdapter,
	_HardwareClassLowerName[371:382]: HardwareClassDslAdapter,
	_HardwareClassName[382:394]:      HardwareClassBlockDevice,
	_HardwareClassLowerName[382:394]: HardwareClassBlockDevice,
	_HardwareClassName[394:398]:      HardwareClassTape,
	_HardwareClassLowerName[394:398]: HardwareClassTape,
	_HardwareClassName[398:407]:      HardwareClassVesaBios,
	_HardwareClassLowerName[398:407]: HardwareClassVesaBios,
	_HardwareClassName[407:416]:      HardwareClassBluetooth,
	_HardwareClassLowerName[407:416]: HardwareClassBluetooth,
	_HardwareClassName[416:427]:      HardwareClassFingerprint,
	_HardwareClassLowerName[416:427]: HardwareClassFingerprint,
	_HardwareClassName[427:441]:      HardwareClassMmcController,
	_HardwareClassLowerName[427:441]: HardwareClassMmcController,
	_HardwareClassName[441:445]:      HardwareClassNvme,
	_HardwareClassLowerName[441:445]: HardwareClassNvme,
	_HardwareClassName[445:452]:      HardwareClassUnknown,
	_HardwareClassLowerName[445:452]: HardwareClassUnknown,
	_HardwareClassName[452:455]:      HardwareClassAll,
	_HardwareClassLowerName[452:455]: HardwareClassAll,
}

var _HardwareClassNames = []string{
	_HardwareClassName[0:4],
	_HardwareClassName[4:10],
	_HardwareClassName[10:13],
	_HardwareClassName[13:21],
	_HardwareClassName[21:28],
	_HardwareClassName[28:33],
	_HardwareClassName[33:41],
	_HardwareClassName[41:48],
	_HardwareClassName[48:55],
	_HardwareClassName[55:64],
	_HardwareClassName[64:71],
	_HardwareClassName[71:78],
	_HardwareClassName[78:91],
	_HardwareClassName[91:102],
	_HardwareClassName[102:108],
	_HardwareClassName[108:113],
	_HardwareClassName[113:131],
	_HardwareClassName[131:149],
	_HardwareClassName[149:161],
	_HardwareClassName[161:166],
	_HardwareClassName[166:183],
	_HardwareClassName[183:187],
	_HardwareClassName[187:196],
	_HardwareClassName[196:201],
	_HardwareClassName[201:207],
	_HardwareClassName[207:213],
	_HardwareClassName[213:227],
	_HardwareClassName[227:230],
	_HardwareClassName[230:234],
	_HardwareClassName[234:237],
	_HardwareClassName[237:243],
	_HardwareClassName[243:249],
	_HardwareClassName[249:252],
	_HardwareClassName[252:256],
	_HardwareClassName[256:259],
	_HardwareClassName[259:265],
	_HardwareClassName[265:273],
	_HardwareClassName[273:279],
	_HardwareClassName[279:296],
	_HardwareClassName[296:304],
	_HardwareClassName[304:323],
	_HardwareClassName[323:330],
	_HardwareClassName[330:348],
	_HardwareClassName[348:351],
	_HardwareClassName[351:356],
	_HardwareClassName[356:365],
	_HardwareClassName[365:371],
	_HardwareClassName[371:382],
	_HardwareClassName[382:394],
	_HardwareClassName[394:398],
	_HardwareClassName[398:407],
	_HardwareClassName[407:416],
	_HardwareClassName[416:427],
	_HardwareClassName[427:441],
	_HardwareClassName[441:445],
	_HardwareClassName[445:452],
	_HardwareClassName[452:455],
}

// HardwareClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HardwareClassString(s string) (HardwareClass, error) {
	if val, ok := _HardwareClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HardwareClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HardwareClass values", s)
}

// HardwareClassValues returns all values of the enum
func HardwareClassValues() []HardwareClass {
	return _HardwareClassValues
}

// HardwareClassStrings returns a slice of all String values of the enum
func HardwareClassStrings() []string {
	strs := make([]string, len(_HardwareClassNames))
	copy(strs, _HardwareClassNames)
	return strs
}

// IsAHardwareClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HardwareClass) IsAHardwareClass() bool {
	for _, v := range _HardwareClassValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HardwareClass
func (i HardwareClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HardwareClass
func (i *HardwareClass) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HardwareClass should be a string, got %s", data)
	}

	var err error
	*i, err = HardwareClassString(s)
	return err
}
