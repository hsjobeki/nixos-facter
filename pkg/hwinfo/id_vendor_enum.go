// Code generated by "enumer -type=Vendor -json -transform=snake -trimprefix Vendor -output=./id_vendor_enum.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_VendorName_0      = "broadcom"
	_VendorLowerName_0 = "broadcom"
	_VendorName_1      = "red_hat"
	_VendorLowerName_1 = "red_hat"
	_VendorName_2      = "intel_corporation"
	_VendorLowerName_2 = "intel_corporation"
)

var (
	_VendorIndex_0 = [...]uint8{0, 8}
	_VendorIndex_1 = [...]uint8{0, 7}
	_VendorIndex_2 = [...]uint8{0, 17}
)

func (i Vendor) String() string {
	switch {
	case i == 5348:
		return _VendorName_0
	case i == 6900:
		return _VendorName_1
	case i == 32902:
		return _VendorName_2
	default:
		return fmt.Sprintf("Vendor(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VendorNoOp() {
	var x [1]struct{}
	_ = x[VendorBroadcom-(5348)]
	_ = x[VendorRedHat-(6900)]
	_ = x[VendorIntelCorporation-(32902)]
}

var _VendorValues = []Vendor{VendorBroadcom, VendorRedHat, VendorIntelCorporation}

var _VendorNameToValueMap = map[string]Vendor{
	_VendorName_0[0:8]:       VendorBroadcom,
	_VendorLowerName_0[0:8]:  VendorBroadcom,
	_VendorName_1[0:7]:       VendorRedHat,
	_VendorLowerName_1[0:7]:  VendorRedHat,
	_VendorName_2[0:17]:      VendorIntelCorporation,
	_VendorLowerName_2[0:17]: VendorIntelCorporation,
}

var _VendorNames = []string{
	_VendorName_0[0:8],
	_VendorName_1[0:7],
	_VendorName_2[0:17],
}

// VendorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VendorString(s string) (Vendor, error) {
	if val, ok := _VendorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VendorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Vendor values", s)
}

// VendorValues returns all values of the enum
func VendorValues() []Vendor {
	return _VendorValues
}

// VendorStrings returns a slice of all String values of the enum
func VendorStrings() []string {
	strs := make([]string, len(_VendorNames))
	copy(strs, _VendorNames)
	return strs
}

// IsAVendor returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Vendor) IsAVendor() bool {
	for _, v := range _VendorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Vendor
func (i Vendor) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Vendor
func (i *Vendor) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Vendor should be a string, got %s", data)
	}

	var err error
	*i, err = VendorString(s)
	return err
}
