// Code generated by "enumer -type=DetailType -json -transform=snake -trimprefix DetailType -output=./detail_enum_type.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _DetailTypeName = "pciusbisa_pnpcdromfloppybioscpuprommonitorsysscsidevtreeccwjoystick"

var _DetailTypeIndex = [...]uint8{0, 3, 6, 13, 18, 24, 28, 31, 35, 42, 45, 49, 56, 59, 67}

const _DetailTypeLowerName = "pciusbisa_pnpcdromfloppybioscpuprommonitorsysscsidevtreeccwjoystick"

func (i DetailType) String() string {
	if i >= DetailType(len(_DetailTypeIndex)-1) {
		return fmt.Sprintf("DetailType(%d)", i)
	}
	return _DetailTypeName[_DetailTypeIndex[i]:_DetailTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DetailTypeNoOp() {
	var x [1]struct{}
	_ = x[DetailTypePci-(0)]
	_ = x[DetailTypeUsb-(1)]
	_ = x[DetailTypeIsaPnp-(2)]
	_ = x[DetailTypeCdrom-(3)]
	_ = x[DetailTypeFloppy-(4)]
	_ = x[DetailTypeBios-(5)]
	_ = x[DetailTypeCpu-(6)]
	_ = x[DetailTypeProm-(7)]
	_ = x[DetailTypeMonitor-(8)]
	_ = x[DetailTypeSys-(9)]
	_ = x[DetailTypeScsi-(10)]
	_ = x[DetailTypeDevtree-(11)]
	_ = x[DetailTypeCcw-(12)]
	_ = x[DetailTypeJoystick-(13)]
}

var _DetailTypeValues = []DetailType{DetailTypePci, DetailTypeUsb, DetailTypeIsaPnp, DetailTypeCdrom, DetailTypeFloppy, DetailTypeBios, DetailTypeCpu, DetailTypeProm, DetailTypeMonitor, DetailTypeSys, DetailTypeScsi, DetailTypeDevtree, DetailTypeCcw, DetailTypeJoystick}

var _DetailTypeNameToValueMap = map[string]DetailType{
	_DetailTypeName[0:3]:        DetailTypePci,
	_DetailTypeLowerName[0:3]:   DetailTypePci,
	_DetailTypeName[3:6]:        DetailTypeUsb,
	_DetailTypeLowerName[3:6]:   DetailTypeUsb,
	_DetailTypeName[6:13]:       DetailTypeIsaPnp,
	_DetailTypeLowerName[6:13]:  DetailTypeIsaPnp,
	_DetailTypeName[13:18]:      DetailTypeCdrom,
	_DetailTypeLowerName[13:18]: DetailTypeCdrom,
	_DetailTypeName[18:24]:      DetailTypeFloppy,
	_DetailTypeLowerName[18:24]: DetailTypeFloppy,
	_DetailTypeName[24:28]:      DetailTypeBios,
	_DetailTypeLowerName[24:28]: DetailTypeBios,
	_DetailTypeName[28:31]:      DetailTypeCpu,
	_DetailTypeLowerName[28:31]: DetailTypeCpu,
	_DetailTypeName[31:35]:      DetailTypeProm,
	_DetailTypeLowerName[31:35]: DetailTypeProm,
	_DetailTypeName[35:42]:      DetailTypeMonitor,
	_DetailTypeLowerName[35:42]: DetailTypeMonitor,
	_DetailTypeName[42:45]:      DetailTypeSys,
	_DetailTypeLowerName[42:45]: DetailTypeSys,
	_DetailTypeName[45:49]:      DetailTypeScsi,
	_DetailTypeLowerName[45:49]: DetailTypeScsi,
	_DetailTypeName[49:56]:      DetailTypeDevtree,
	_DetailTypeLowerName[49:56]: DetailTypeDevtree,
	_DetailTypeName[56:59]:      DetailTypeCcw,
	_DetailTypeLowerName[56:59]: DetailTypeCcw,
	_DetailTypeName[59:67]:      DetailTypeJoystick,
	_DetailTypeLowerName[59:67]: DetailTypeJoystick,
}

var _DetailTypeNames = []string{
	_DetailTypeName[0:3],
	_DetailTypeName[3:6],
	_DetailTypeName[6:13],
	_DetailTypeName[13:18],
	_DetailTypeName[18:24],
	_DetailTypeName[24:28],
	_DetailTypeName[28:31],
	_DetailTypeName[31:35],
	_DetailTypeName[35:42],
	_DetailTypeName[42:45],
	_DetailTypeName[45:49],
	_DetailTypeName[49:56],
	_DetailTypeName[56:59],
	_DetailTypeName[59:67],
}

// DetailTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DetailTypeString(s string) (DetailType, error) {
	if val, ok := _DetailTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DetailTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DetailType values", s)
}

// DetailTypeValues returns all values of the enum
func DetailTypeValues() []DetailType {
	return _DetailTypeValues
}

// DetailTypeStrings returns a slice of all String values of the enum
func DetailTypeStrings() []string {
	strs := make([]string, len(_DetailTypeNames))
	copy(strs, _DetailTypeNames)
	return strs
}

// IsADetailType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DetailType) IsADetailType() bool {
	for _, v := range _DetailTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DetailType
func (i DetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DetailType
func (i *DetailType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DetailType should be a string, got %s", data)
	}

	var err error
	*i, err = DetailTypeString(s)
	return err
}
