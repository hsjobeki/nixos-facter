// Code generated by "enumer -type=YesNoFlags -json -transform=snake -trimprefix YesNoFlags -output=./resource_enum_yes_no_flags.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _YesNoFlagsName = "unknownnoyes"

var _YesNoFlagsIndex = [...]uint8{0, 7, 9, 12}

const _YesNoFlagsLowerName = "unknownnoyes"

func (i YesNoFlags) String() string {
	if i >= YesNoFlags(len(_YesNoFlagsIndex)-1) {
		return fmt.Sprintf("YesNoFlags(%d)", i)
	}
	return _YesNoFlagsName[_YesNoFlagsIndex[i]:_YesNoFlagsIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _YesNoFlagsNoOp() {
	var x [1]struct{}
	_ = x[YesNoFlagsUnknown-(0)]
	_ = x[YesNoFlagsNo-(1)]
	_ = x[YesNoFlagsYes-(2)]
}

var _YesNoFlagsValues = []YesNoFlags{YesNoFlagsUnknown, YesNoFlagsNo, YesNoFlagsYes}

var _YesNoFlagsNameToValueMap = map[string]YesNoFlags{
	_YesNoFlagsName[0:7]:       YesNoFlagsUnknown,
	_YesNoFlagsLowerName[0:7]:  YesNoFlagsUnknown,
	_YesNoFlagsName[7:9]:       YesNoFlagsNo,
	_YesNoFlagsLowerName[7:9]:  YesNoFlagsNo,
	_YesNoFlagsName[9:12]:      YesNoFlagsYes,
	_YesNoFlagsLowerName[9:12]: YesNoFlagsYes,
}

var _YesNoFlagsNames = []string{
	_YesNoFlagsName[0:7],
	_YesNoFlagsName[7:9],
	_YesNoFlagsName[9:12],
}

// YesNoFlagsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func YesNoFlagsString(s string) (YesNoFlags, error) {
	if val, ok := _YesNoFlagsNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _YesNoFlagsNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to YesNoFlags values", s)
}

// YesNoFlagsValues returns all values of the enum
func YesNoFlagsValues() []YesNoFlags {
	return _YesNoFlagsValues
}

// YesNoFlagsStrings returns a slice of all String values of the enum
func YesNoFlagsStrings() []string {
	strs := make([]string, len(_YesNoFlagsNames))
	copy(strs, _YesNoFlagsNames)
	return strs
}

// IsAYesNoFlags returns "true" if the value is listed in the enum definition. "false" otherwise
func (i YesNoFlags) IsAYesNoFlags() bool {
	for _, v := range _YesNoFlagsValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for YesNoFlags
func (i YesNoFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for YesNoFlags
func (i *YesNoFlags) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("YesNoFlags should be a string, got %s", data)
	}

	var err error
	*i, err = YesNoFlagsString(s)
	return err
}
