// Code generated by "enumer -type=GeoType -json -transform=snake -trimprefix GeoType -output=./resource_enum_geo_type.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _GeoTypeName = "physicallogicalbios_eddbios_legacy"

var _GeoTypeIndex = [...]uint8{0, 8, 15, 23, 34}

const _GeoTypeLowerName = "physicallogicalbios_eddbios_legacy"

func (i GeoType) String() string {
	if i >= GeoType(len(_GeoTypeIndex)-1) {
		return fmt.Sprintf("GeoType(%d)", i)
	}
	return _GeoTypeName[_GeoTypeIndex[i]:_GeoTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GeoTypeNoOp() {
	var x [1]struct{}
	_ = x[GeoTypePhysical-(0)]
	_ = x[GeoTypeLogical-(1)]
	_ = x[GeoTypeBiosEdd-(2)]
	_ = x[GeoTypeBiosLegacy-(3)]
}

var _GeoTypeValues = []GeoType{GeoTypePhysical, GeoTypeLogical, GeoTypeBiosEdd, GeoTypeBiosLegacy}

var _GeoTypeNameToValueMap = map[string]GeoType{
	_GeoTypeName[0:8]:        GeoTypePhysical,
	_GeoTypeLowerName[0:8]:   GeoTypePhysical,
	_GeoTypeName[8:15]:       GeoTypeLogical,
	_GeoTypeLowerName[8:15]:  GeoTypeLogical,
	_GeoTypeName[15:23]:      GeoTypeBiosEdd,
	_GeoTypeLowerName[15:23]: GeoTypeBiosEdd,
	_GeoTypeName[23:34]:      GeoTypeBiosLegacy,
	_GeoTypeLowerName[23:34]: GeoTypeBiosLegacy,
}

var _GeoTypeNames = []string{
	_GeoTypeName[0:8],
	_GeoTypeName[8:15],
	_GeoTypeName[15:23],
	_GeoTypeName[23:34],
}

// GeoTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GeoTypeString(s string) (GeoType, error) {
	if val, ok := _GeoTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GeoTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GeoType values", s)
}

// GeoTypeValues returns all values of the enum
func GeoTypeValues() []GeoType {
	return _GeoTypeValues
}

// GeoTypeStrings returns a slice of all String values of the enum
func GeoTypeStrings() []string {
	strs := make([]string, len(_GeoTypeNames))
	copy(strs, _GeoTypeNames)
	return strs
}

// IsAGeoType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GeoType) IsAGeoType() bool {
	for _, v := range _GeoTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for GeoType
func (i GeoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for GeoType
func (i *GeoType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("GeoType should be a string, got %s", data)
	}

	var err error
	*i, err = GeoTypeString(s)
	return err
}
