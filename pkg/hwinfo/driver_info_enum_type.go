// Code generated by "enumer -type=DriverInfoType -json -transform=snake -trimprefix DriverInfoType -output=./driver_info_enum_type.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _DriverInfoTypeName = "anydisplaymodulemousex11isdnkeyboarddsl"

var _DriverInfoTypeIndex = [...]uint8{0, 3, 10, 16, 21, 24, 28, 36, 39}

const _DriverInfoTypeLowerName = "anydisplaymodulemousex11isdnkeyboarddsl"

func (i DriverInfoType) String() string {
	if i >= DriverInfoType(len(_DriverInfoTypeIndex)-1) {
		return fmt.Sprintf("DriverInfoType(%d)", i)
	}
	return _DriverInfoTypeName[_DriverInfoTypeIndex[i]:_DriverInfoTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DriverInfoTypeNoOp() {
	var x [1]struct{}
	_ = x[DriverInfoTypeAny-(0)]
	_ = x[DriverInfoTypeDisplay-(1)]
	_ = x[DriverInfoTypeModule-(2)]
	_ = x[DriverInfoTypeMouse-(3)]
	_ = x[DriverInfoTypeX11-(4)]
	_ = x[DriverInfoTypeIsdn-(5)]
	_ = x[DriverInfoTypeKeyboard-(6)]
	_ = x[DriverInfoTypeDsl-(7)]
}

var _DriverInfoTypeValues = []DriverInfoType{DriverInfoTypeAny, DriverInfoTypeDisplay, DriverInfoTypeModule, DriverInfoTypeMouse, DriverInfoTypeX11, DriverInfoTypeIsdn, DriverInfoTypeKeyboard, DriverInfoTypeDsl}

var _DriverInfoTypeNameToValueMap = map[string]DriverInfoType{
	_DriverInfoTypeName[0:3]:        DriverInfoTypeAny,
	_DriverInfoTypeLowerName[0:3]:   DriverInfoTypeAny,
	_DriverInfoTypeName[3:10]:       DriverInfoTypeDisplay,
	_DriverInfoTypeLowerName[3:10]:  DriverInfoTypeDisplay,
	_DriverInfoTypeName[10:16]:      DriverInfoTypeModule,
	_DriverInfoTypeLowerName[10:16]: DriverInfoTypeModule,
	_DriverInfoTypeName[16:21]:      DriverInfoTypeMouse,
	_DriverInfoTypeLowerName[16:21]: DriverInfoTypeMouse,
	_DriverInfoTypeName[21:24]:      DriverInfoTypeX11,
	_DriverInfoTypeLowerName[21:24]: DriverInfoTypeX11,
	_DriverInfoTypeName[24:28]:      DriverInfoTypeIsdn,
	_DriverInfoTypeLowerName[24:28]: DriverInfoTypeIsdn,
	_DriverInfoTypeName[28:36]:      DriverInfoTypeKeyboard,
	_DriverInfoTypeLowerName[28:36]: DriverInfoTypeKeyboard,
	_DriverInfoTypeName[36:39]:      DriverInfoTypeDsl,
	_DriverInfoTypeLowerName[36:39]: DriverInfoTypeDsl,
}

var _DriverInfoTypeNames = []string{
	_DriverInfoTypeName[0:3],
	_DriverInfoTypeName[3:10],
	_DriverInfoTypeName[10:16],
	_DriverInfoTypeName[16:21],
	_DriverInfoTypeName[21:24],
	_DriverInfoTypeName[24:28],
	_DriverInfoTypeName[28:36],
	_DriverInfoTypeName[36:39],
}

// DriverInfoTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DriverInfoTypeString(s string) (DriverInfoType, error) {
	if val, ok := _DriverInfoTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DriverInfoTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DriverInfoType values", s)
}

// DriverInfoTypeValues returns all values of the enum
func DriverInfoTypeValues() []DriverInfoType {
	return _DriverInfoTypeValues
}

// DriverInfoTypeStrings returns a slice of all String values of the enum
func DriverInfoTypeStrings() []string {
	strs := make([]string, len(_DriverInfoTypeNames))
	copy(strs, _DriverInfoTypeNames)
	return strs
}

// IsADriverInfoType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DriverInfoType) IsADriverInfoType() bool {
	for _, v := range _DriverInfoTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DriverInfoType
func (i DriverInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DriverInfoType
func (i *DriverInfoType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DriverInfoType should be a string, got %s", data)
	}

	var err error
	*i, err = DriverInfoTypeString(s)
	return err
}
