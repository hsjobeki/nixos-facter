// Code generated by "enumer -type=SwapType -json -transform=snake -trimprefix SwapType -output=./swap_enum_type.go"; DO NOT EDIT.

package ephem

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SwapTypeName = "filepartition"

var _SwapTypeIndex = [...]uint8{0, 4, 13}

const _SwapTypeLowerName = "filepartition"

func (i SwapType) String() string {
	if i >= SwapType(len(_SwapTypeIndex)-1) {
		return fmt.Sprintf("SwapType(%d)", i)
	}
	return _SwapTypeName[_SwapTypeIndex[i]:_SwapTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SwapTypeNoOp() {
	var x [1]struct{}
	_ = x[SwapTypeFile-(0)]
	_ = x[SwapTypePartition-(1)]
}

var _SwapTypeValues = []SwapType{SwapTypeFile, SwapTypePartition}

var _SwapTypeNameToValueMap = map[string]SwapType{
	_SwapTypeName[0:4]:       SwapTypeFile,
	_SwapTypeLowerName[0:4]:  SwapTypeFile,
	_SwapTypeName[4:13]:      SwapTypePartition,
	_SwapTypeLowerName[4:13]: SwapTypePartition,
}

var _SwapTypeNames = []string{
	_SwapTypeName[0:4],
	_SwapTypeName[4:13],
}

// SwapTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SwapTypeString(s string) (SwapType, error) {
	if val, ok := _SwapTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SwapTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SwapType values", s)
}

// SwapTypeValues returns all values of the enum
func SwapTypeValues() []SwapType {
	return _SwapTypeValues
}

// SwapTypeStrings returns a slice of all String values of the enum
func SwapTypeStrings() []string {
	strs := make([]string, len(_SwapTypeNames))
	copy(strs, _SwapTypeNames)
	return strs
}

// IsASwapType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SwapType) IsASwapType() bool {
	for _, v := range _SwapTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SwapType
func (i SwapType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SwapType
func (i *SwapType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SwapType should be a string, got %s", data)
	}

	var err error
	*i, err = SwapTypeString(s)
	return err
}
