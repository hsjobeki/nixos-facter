// Code generated by "enumer -type=Type -json -transform=snake -trimprefix Type -output=./virt_enum_type.go"; DO NOT EDIT.

package virt

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TypeName = "nonekvmamazonqemubochsxenumlvmwareoraclemicrosoftzvmparallelsbhyveqnxacrnpower_vmapplegooglesrevm_othersystemd_nspawnlxc_libvirtlxcopenvzdockerpodmanrktwslprootpouchcontainer_other"

var _TypeIndex = [...]uint8{0, 4, 7, 13, 17, 22, 25, 28, 34, 40, 49, 52, 61, 66, 69, 73, 81, 86, 92, 95, 103, 117, 128, 131, 137, 143, 149, 152, 155, 160, 165, 180}

const _TypeLowerName = "nonekvmamazonqemubochsxenumlvmwareoraclemicrosoftzvmparallelsbhyveqnxacrnpower_vmapplegooglesrevm_othersystemd_nspawnlxc_libvirtlxcopenvzdockerpodmanrktwslprootpouchcontainer_other"

func (i Type) String() string {
	if i < 0 || i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[TypeNone-(0)]
	_ = x[TypeKvm-(1)]
	_ = x[TypeAmazon-(2)]
	_ = x[TypeQemu-(3)]
	_ = x[TypeBochs-(4)]
	_ = x[TypeXen-(5)]
	_ = x[TypeUml-(6)]
	_ = x[TypeVmware-(7)]
	_ = x[TypeOracle-(8)]
	_ = x[TypeMicrosoft-(9)]
	_ = x[TypeZvm-(10)]
	_ = x[TypeParallels-(11)]
	_ = x[TypeBhyve-(12)]
	_ = x[TypeQnx-(13)]
	_ = x[TypeAcrn-(14)]
	_ = x[TypePowerVM-(15)]
	_ = x[TypeApple-(16)]
	_ = x[TypeGoogle-(17)]
	_ = x[TypeSre-(18)]
	_ = x[TypeVmOther-(19)]
	_ = x[TypeSystemdNspawn-(20)]
	_ = x[TypeLxcLibvirt-(21)]
	_ = x[TypeLxc-(22)]
	_ = x[TypeOpenvz-(23)]
	_ = x[TypeDocker-(24)]
	_ = x[TypePodman-(25)]
	_ = x[TypeRkt-(26)]
	_ = x[TypeWsl-(27)]
	_ = x[TypeProot-(28)]
	_ = x[TypePouch-(29)]
	_ = x[TypeContainerOther-(30)]
}

var _TypeValues = []Type{TypeNone, TypeKvm, TypeAmazon, TypeQemu, TypeBochs, TypeXen, TypeUml, TypeVmware, TypeOracle, TypeMicrosoft, TypeZvm, TypeParallels, TypeBhyve, TypeQnx, TypeAcrn, TypePowerVM, TypeApple, TypeGoogle, TypeSre, TypeVmOther, TypeSystemdNspawn, TypeLxcLibvirt, TypeLxc, TypeOpenvz, TypeDocker, TypePodman, TypeRkt, TypeWsl, TypeProot, TypePouch, TypeContainerOther}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:4]:          TypeNone,
	_TypeLowerName[0:4]:     TypeNone,
	_TypeName[4:7]:          TypeKvm,
	_TypeLowerName[4:7]:     TypeKvm,
	_TypeName[7:13]:         TypeAmazon,
	_TypeLowerName[7:13]:    TypeAmazon,
	_TypeName[13:17]:        TypeQemu,
	_TypeLowerName[13:17]:   TypeQemu,
	_TypeName[17:22]:        TypeBochs,
	_TypeLowerName[17:22]:   TypeBochs,
	_TypeName[22:25]:        TypeXen,
	_TypeLowerName[22:25]:   TypeXen,
	_TypeName[25:28]:        TypeUml,
	_TypeLowerName[25:28]:   TypeUml,
	_TypeName[28:34]:        TypeVmware,
	_TypeLowerName[28:34]:   TypeVmware,
	_TypeName[34:40]:        TypeOracle,
	_TypeLowerName[34:40]:   TypeOracle,
	_TypeName[40:49]:        TypeMicrosoft,
	_TypeLowerName[40:49]:   TypeMicrosoft,
	_TypeName[49:52]:        TypeZvm,
	_TypeLowerName[49:52]:   TypeZvm,
	_TypeName[52:61]:        TypeParallels,
	_TypeLowerName[52:61]:   TypeParallels,
	_TypeName[61:66]:        TypeBhyve,
	_TypeLowerName[61:66]:   TypeBhyve,
	_TypeName[66:69]:        TypeQnx,
	_TypeLowerName[66:69]:   TypeQnx,
	_TypeName[69:73]:        TypeAcrn,
	_TypeLowerName[69:73]:   TypeAcrn,
	_TypeName[73:81]:        TypePowerVM,
	_TypeLowerName[73:81]:   TypePowerVM,
	_TypeName[81:86]:        TypeApple,
	_TypeLowerName[81:86]:   TypeApple,
	_TypeName[86:92]:        TypeGoogle,
	_TypeLowerName[86:92]:   TypeGoogle,
	_TypeName[92:95]:        TypeSre,
	_TypeLowerName[92:95]:   TypeSre,
	_TypeName[95:103]:       TypeVmOther,
	_TypeLowerName[95:103]:  TypeVmOther,
	_TypeName[103:117]:      TypeSystemdNspawn,
	_TypeLowerName[103:117]: TypeSystemdNspawn,
	_TypeName[117:128]:      TypeLxcLibvirt,
	_TypeLowerName[117:128]: TypeLxcLibvirt,
	_TypeName[128:131]:      TypeLxc,
	_TypeLowerName[128:131]: TypeLxc,
	_TypeName[131:137]:      TypeOpenvz,
	_TypeLowerName[131:137]: TypeOpenvz,
	_TypeName[137:143]:      TypeDocker,
	_TypeLowerName[137:143]: TypeDocker,
	_TypeName[143:149]:      TypePodman,
	_TypeLowerName[143:149]: TypePodman,
	_TypeName[149:152]:      TypeRkt,
	_TypeLowerName[149:152]: TypeRkt,
	_TypeName[152:155]:      TypeWsl,
	_TypeLowerName[152:155]: TypeWsl,
	_TypeName[155:160]:      TypeProot,
	_TypeLowerName[155:160]: TypeProot,
	_TypeName[160:165]:      TypePouch,
	_TypeLowerName[160:165]: TypePouch,
	_TypeName[165:180]:      TypeContainerOther,
	_TypeLowerName[165:180]: TypeContainerOther,
}

var _TypeNames = []string{
	_TypeName[0:4],
	_TypeName[4:7],
	_TypeName[7:13],
	_TypeName[13:17],
	_TypeName[17:22],
	_TypeName[22:25],
	_TypeName[25:28],
	_TypeName[28:34],
	_TypeName[34:40],
	_TypeName[40:49],
	_TypeName[49:52],
	_TypeName[52:61],
	_TypeName[61:66],
	_TypeName[66:69],
	_TypeName[69:73],
	_TypeName[73:81],
	_TypeName[81:86],
	_TypeName[86:92],
	_TypeName[92:95],
	_TypeName[95:103],
	_TypeName[103:117],
	_TypeName[117:128],
	_TypeName[128:131],
	_TypeName[131:137],
	_TypeName[137:143],
	_TypeName[143:149],
	_TypeName[149:152],
	_TypeName[152:155],
	_TypeName[155:160],
	_TypeName[160:165],
	_TypeName[165:180],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Type
func (i Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Type
func (i *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}

	var err error
	*i, err = TypeString(s)
	return err
}
